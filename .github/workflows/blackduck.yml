name: Black Duck SCA Scan

on:
  pull_request:
    branches:
      - main

jobs:
  blackduck-scan:
    permissions: write-all
    name: Run Black Duck SCA Scan
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Check Python version
      - name: Check Python version
        run: |
          python3 -V

      # Download pkgs from Artifactory using pip
      - name: Run pip download
        env:
            JFROG_USER: ${{ secrets.JFROG_USER }}
            JFROG_TOKEN: ${{ secrets.JFROG_TOKEN }}
        run: |
          pip download -r python-oss-pkgs/requirements_py.txt \
          -d ".binaries" --only-binary=:all: \
          -i https://$JFROG_USER:$JFROG_TOKEN@trialk9fuj6.jfrog.io/artifactory/api/pypi/bd-demo-pypi-remote/simple

      # Set up Java (required for Black Duck Detect CLI)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      # Download Black Duck Detect CLI
      - name: Download Black Duck Detect CLI
        run: |
          curl -L -o detect.sh https://detect.blackduck.com/detect10.sh
          chmod +x detect.sh

      # Run Black Duck Detect CLI
      - name: Run Black Duck Detect
        env:
            BLACKDUCK_URL: ${{ vars.BLACKDUCK_URL }}
            BLACKDUCK_API_TOKEN: ${{ secrets.BLACKDUCK_API_TOKEN }}
            PR_NUMBER: ${{ github.event.pull_request.number || github.event.number }}
        run: |
          set -oe pipefail
          
          output_file="output.txt"

          ./detect.sh \
            --blackduck.url=$BLACKDUCK_URL \
            --blackduck.api.token=$BLACKDUCK_API_TOKEN \
            --detect.project.name="bd-pr-template-eg" \
            --detect.project.version.name="PR-$PR_NUMBER" \
            --detect.project.version.distribution=INTERNAL \
            --detect.project.version.update=true \
            --detect.tools=BINARY_SCAN \
            --detect.source.path=.binaries \
            --detect.binary.scan.file.name.patterns="*" \
            --detect.wait.for.results=true \
            --detect.policy.check.fail.on.names="hw_bd_demo_vuln_risk" \
            --detect.report.timeout=300 \
            --detect.risk.report.pdf=true | tee $output_file

          if [ $? -ne 0 ]; then
            echo "One of the commands failed!!"
          fi

          echo "End of scan"
          ls -l
          echo "The command output is below: "
          cat $output_file

      # Parse the output file to capture the BOM URL
      - name: Grep BOM url
        if: always()
        run: |
          set -e

          ls -l
          while read a b url; do [[ $b == 'Black Duck Project BOM: ' ]] && echo $url; done < $output_file

      # Post scan: Upload RiskReport.pdf to PR comments
      - name: Upload RiskReport.pdf to PR comments
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RISK_REPORT=$(find . -name "*RiskReport.pdf" | head -n 1)
          if [ -f "$RISK_REPORT" ]; then
            COMMENT_BODY="""
            ### Black Duck Risk Report
            The scan has completed successfully. Please find the Risk Report attached.
            """
            gh pr comment ${{ github.event.pull_request.number || github.event.number }} --body "$COMMENT_BODY"
          else
            echo "RiskReport.pdf not found."
          fi
